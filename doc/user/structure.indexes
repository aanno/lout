@Section
   @Title { Indexes }
   @Tag { indexes }
@Begin
@PP
Although Lout is not clever enough to guess what entries should go in
indexes. @Index { indexes }
your index, it will do almost everything else for you:  sort the
entries and attach the correct page numbers automatically.  As for
tables of contents, the default setting is to have an index in
books but not in other types of documents.  This and a few aspects of
the appearance of the index can be changed by changing the setup file,
as explained at the end of this section.
@PP
Now, suppose you are discussing Galileo and you want his name in your
index.  Here is the basic way to do it:
index. @Index @Code "@Index"
@ID @Code "galileo. @Index { Galileo Galilei (1564--1642) }"
You place this into the text much like a footnote.  Nothing at all
appears where you put it, but something like
@ID { Galileo Galilei (1564--1642), 198 }
appears in the index.  This is just the object following the @Code "@Index"
symbol, with a comma and the correct page number appended automatically.
@PP
The object preceding the @Code "@Index" symbol is a compulsory tag which
is used for sorting the index entries, but which is not itself printed
anywhere.  This tag must be different from all the other tags given to index
entries and large-scale structure symbols.  It is best to make the tag from
lower-case letters and the . character only, beginning with a letter.  The
author of this guide is in the habit of including at least one . in
all index tags, to be certain that they differ from other tags.
@PP
The language of the index entry will be the initial language of the
document as a whole, which is not necessarily the language at the point
where the index entry occurs.  To get the correct language you will need a
@Code "@Language" symbol following the @Code "@Index" symbol:
@ID @Code "galileo. @Index French @Language { Galileo Galilei }"
or whatever.  If you don't do this your index entry might be hyphenated
incorrectly.
@PP
Indexes often have subsidiary entries, indicated by a small indent, and
there is a @Code "@SubIndex" symbol for them.  For example, suppose that
subindex. @Index @Code "@SubIndex"
these three index entries are put in various places through the document:
@ID @Code {
"galileo. @Index { Galileo Galilei (1564--1642) }"
"galileo.telescope @SubIndex { telescope, his use of }"
"galileo.trial @SubIndex { trial of }"
}
Then the index will contain something like this:
@ID lines @Break {
Galileo Galilei (1564--1642), 198
    telescope, his use of, 200
    trial of, 205
}
Notice how the tags have been carefully chosen to produce the desired
ordering of the entries.  @Code "@SubIndex" differs from @Code "@Index"
by producing an indent, nothing else.  There is also a @Code "@SubSubIndex"
subsubindex. @Index @Code "@SubSubIndex"
symbol that makes a double indent.
@PP
These symbols attach one page number to each entry.  Although the best
authorities recommend exactly this, many authors choose to have entries
like
@ID { Galileo Galilei (1564--1642), 198--218, 259, 334, 367 }
despite the inconvenience to their readers.  {@Code "@RawIndex"},
rawindex. @Index @Code "@RawIndex"
rawsubindex. @Index @Code "@RawSubIndex"
rawsubsubindex. @Index @Code "@RawSubSubIndex"
{@Code "@RawSubIndex"}, and {@Code "@RawSubSubIndex"} symbols are provided
which do not add page numbers to the entry, leaving this to the user.  For
example, one systematic way to get page number ranges is to place
@ID @Code {
"galileo. @RawIndex {"
"    Galileo Galilei (1564--1642), @PageOf { galileo. }--@PageOf { galileo.end }"
"}"
}
at the start of the range, and
@ID @Code {
"@PageMark { galileo.end }"
}
at the end of the range.  This works because all six index symbols include
a @Code "@PageMark" operation (Section {@NumberOf cross}).
@PP
Another use for @Code "@RawIndex" is to get blank lines into the index
between the letters of the alphabet, by inserting phantom entries:
@ID @Code {
"b @RawIndex {}"
"c @RawIndex {}"
"..."
"z @RawIndex {}"
}
In fact there is a symbol called @Code "@IndexBlanks" that makes
indexblanks. @Index @Code "@IndexBlanks"
exactly these 25 entries.  Unfortunately, these blanks will occasionally
appear at the top of a column, and if there are no tags beginning with
x, for example, there will be two blank lines between the w and y
entries.  You can start off with @Code "@IndexBlanks" and replace it
later by the appropriate subset, if necessary.
@FootNote {
For Lout to solve this problem automatically, it would need to be told
which letter each index entry belongs under, perhaps by symbols
{@Code "@AIndex"}, {@Code "@BIndex"}, etc.  The author felt that this
would have been too tedious.
}
@PP
Although the page numbers in index entries will be kept up to date
automatically as the document changes, as all cross references are, 
it is best to refrain from inserting index entries until the document
is complete and an overall plan of the structure of the index can
be made.
@PP
The remainder of this section describes how to change the appearance of
the index by setting options in the setup file.  For setup files and
their options in general, consult Section {@NumberOf setup}.
@PP
There are five setup file options for the index.  Here they are with
their default values:
@ID @Code {
"@MakeIndex { No }"
"@IndexFont { }"
"@IndexBreak { outdent 1.2fx }"
"@IndexColumnNumber { 2 }"
"@IndexColumnGap { 1.00c }"
}
The @Code "@MakeIndex" option, which may be @Code Yes or {@Code No},
makeindex. @Index @Code "@MakeIndex"
determines whether to produce an index or not.  Although the default
value is {@Code No}, any type of document may be given an index just
by changing it to {@Code Yes}.  This has already been done in the
@Code book setup file, but not in the others.
@PP
@Code "@IndexFont" determines the font and font size of index entries
indexfont. @Index @Code "@IndexFont"
(e.g. {@Code "Times Base 12p"}).  Leaving it empty as above produces
the same font as the rest of the document.  @Code "@IndexBreak" is the
indexbreak. @Index @Code "@IndexBreak"
paragraph breaking style applied to index entries; @Code outdent is the
traditional and best way.
@PP
@Code "@IndexColumnNumber" and @Code "@IndexColumnGap" determine the
indexcolumnnumber. @Index @Code "@IndexColumnNumber"
indexcolumngap. @Index @Code "@IndexColumnGap"
number of index columns per page, and the gap between them, and are
exactly analogous to the @Code "@ColumnNumber" and @Code "@ColumnGap"
options described in Section {@NumberOf columns}.
@End @Section
